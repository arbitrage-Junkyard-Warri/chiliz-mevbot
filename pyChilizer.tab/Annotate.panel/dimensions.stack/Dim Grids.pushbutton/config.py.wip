from pyrevit import revit, DB
from pyrevit import forms
from pyrevit import script


import dimgridsui

doc = __revit__.ActiveUIDocument.Document

my_config = script.get_config("dim_style")

class FSCategoryItem(forms.TemplateListItem):
    """Wrapper class for frequently selected category list item"""
    pass


# config = script.get_config()

# dimgridsui.config_dimgridsui(config)
# dimgridsui.update_ui(config)

# somehow DB.BuiltInCategory.OST_Truss does not have a corresponding DB.Category
FREQUENTLY_SELECTED_CATEGORIES = [
    DB.BuiltInCategory.OST_AreaSchemeLines,
    DB.BuiltInCategory.OST_Columns,
    DB.BuiltInCategory.OST_StructuralColumns,
    DB.BuiltInCategory.OST_Doors,
    DB.BuiltInCategory.OST_Floors,
    DB.BuiltInCategory.OST_StructuralFraming,
    DB.BuiltInCategory.OST_Walls,
    DB.BuiltInCategory.OST_Windows,
]

def load_configs():
    """Load list of frequently selected categories from configs or defaults"""
    fscats = my_config.get_option('fscats', [])
    revit_cats = [revit.query.get_category(x)
                  for x in (fscats or FREQUENTLY_SELECTED_CATEGORIES)]
    return filter(None, revit_cats)


def save_configs(categories):
    """Save given list of categories as frequently selected"""
    my_config.fscats = [x.Name for x in categories]
    script.save_config()


def reset_defaults(options):
    """Reset frequently selected categories to defaults"""
    defaults = [revit.query.get_category(x)
                for x in FREQUENTLY_SELECTED_CATEGORIES]
    default_names = [x.Name for x in defaults if x]
    for opt in options:
        if opt.name in default_names:
            opt.checked = True

def configure_fscats():
    """Ask for users frequently selected categories"""
    # prev_fscats = load_configs()

    all_dim_types = [doc.GetElement(x).Name for x in DB.FilteredElementCollector(doc)\
        .OfCategory(DB.BuiltInCategory.OST_Dimensions)\
            .WhereElementIsElementType()\
            .ToElementIds()]


    print(all_dim_types)
    # my_config.dim_type = all_dim_types[0]
    # script.save_config()
    


if __name__ == "__main__":
    configure_fscats()